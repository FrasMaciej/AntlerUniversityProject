//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from x:/source/Antlr/FrasMaciej/AntlerUniversityProject/Maps/Maps/GetUMPStx.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GetUMPStx : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SECTstart=1, COMMENT=2, WS=3, EQ=4, NL=5, IntComment=6, SECTend=7, LabI=8, 
		ID=9, NUM=10, V=11;
	public const int
		RULE_file = 0, RULE_section = 1, RULE_kvEq = 2;
	public static readonly string[] ruleNames = {
		"file", "section", "kvEq"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SECTstart", "COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", 
		"LabI", "ID", "NUM", "V"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GetUMPStx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GetUMPStx() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GetUMPStx(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GetUMPStx(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GetUMPStx.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGetUMPStxVisitor<TResult> typedVisitor = visitor as IGetUMPStxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SECTstart) {
				{
				{
				State = 6;
				section();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 12;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTstart() { return GetToken(GetUMPStx.SECTstart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECTend() { return GetToken(GetUMPStx.SECTend, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvEqContext[] kvEq() {
			return GetRuleContexts<KvEqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvEqContext kvEq(int i) {
			return GetRuleContext<KvEqContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGetUMPStxVisitor<TResult> typedVisitor = visitor as IGetUMPStxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			Match(SECTstart);
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LabI || _la==ID) {
				{
				{
				State = 15;
				kvEq();
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 21;
			Match(SECTend);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvEqContext : ParserRuleContext {
		public KvEqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvEq; } }
	 
		public KvEqContext() { }
		public virtual void CopyFrom(KvEqContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleEqContext : KvEqContext {
		public IToken key;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(GetUMPStx.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V() { return GetToken(GetUMPStx.V, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GetUMPStx.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LabI() { return GetToken(GetUMPStx.LabI, 0); }
		public SimpleEqContext(KvEqContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGetUMPStxVisitor<TResult> typedVisitor = visitor as IGetUMPStxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdxEqContext : KvEqContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GetUMPStx.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(GetUMPStx.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(GetUMPStx.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode V() { return GetToken(GetUMPStx.V, 0); }
		public IdxEqContext(KvEqContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGetUMPStxVisitor<TResult> typedVisitor = visitor as IGetUMPStxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdxEq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvEqContext kvEq() {
		KvEqContext _localctx = new KvEqContext(Context, State);
		EnterRule(_localctx, 4, RULE_kvEq);
		int _la;
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new SimpleEqContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				((SimpleEqContext)_localctx).key = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LabI || _la==ID) ) {
					((SimpleEqContext)_localctx).key = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 24;
				Match(EQ);
				State = 25;
				Match(V);
				}
				break;
			case 2:
				_localctx = new IdxEqContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				Match(ID);
				State = 27;
				Match(NUM);
				State = 28;
				Match(EQ);
				State = 29;
				Match(V);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,33,2,0,7,0,2,1,7,1,2,2,7,2,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,0,1,
		0,1,1,1,1,5,1,17,8,1,10,1,12,1,20,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,31,8,2,1,2,0,0,3,0,2,4,0,1,1,0,8,9,32,0,9,1,0,0,0,2,14,1,0,0,0,
		4,30,1,0,0,0,6,8,3,2,1,0,7,6,1,0,0,0,8,11,1,0,0,0,9,7,1,0,0,0,9,10,1,0,
		0,0,10,12,1,0,0,0,11,9,1,0,0,0,12,13,5,0,0,1,13,1,1,0,0,0,14,18,5,1,0,
		0,15,17,3,4,2,0,16,15,1,0,0,0,17,20,1,0,0,0,18,16,1,0,0,0,18,19,1,0,0,
		0,19,21,1,0,0,0,20,18,1,0,0,0,21,22,5,7,0,0,22,3,1,0,0,0,23,24,7,0,0,0,
		24,25,5,4,0,0,25,31,5,11,0,0,26,27,5,9,0,0,27,28,5,10,0,0,28,29,5,4,0,
		0,29,31,5,11,0,0,30,23,1,0,0,0,30,26,1,0,0,0,31,5,1,0,0,0,3,9,18,30
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
