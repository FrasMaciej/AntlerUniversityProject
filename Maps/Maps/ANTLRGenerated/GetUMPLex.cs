//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d://Studia-2st//Antler//AntlerUniversityProject//Maps//Maps//GetUMPLex.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GetUMPLex : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SECTstart=1, COMMENT=2, WS=3, EQ=4, NL=5, IntComment=6, SECTend=7, LabI=8, 
		ID=9, NUM=10, V=11;
	public const int
		SECTION=1, VALUE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "SECTION", "VALUE"
	};

	public static readonly string[] ruleNames = {
		"SECTstart", "COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", "LabI", 
		"ID", "NUM", "V"
	};


	public GetUMPLex(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GetUMPLex(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SECTstart", "COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", 
		"LabI", "ID", "NUM", "V"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GetUMPLex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GetUMPLex() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,129,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,0,1,0,1,0,1,0,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,1,1,
		1,1,1,1,1,1,2,4,2,49,8,2,11,2,12,2,50,1,2,1,2,1,3,1,3,1,3,1,3,1,4,4,4,
		60,8,4,11,4,12,4,61,1,4,1,4,1,5,1,5,5,5,68,8,5,10,5,12,5,71,9,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,87,8,6,1,6,1,6,5,
		6,91,8,6,10,6,12,6,94,9,6,3,6,96,8,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,8,4,8,111,8,8,11,8,12,8,112,1,9,4,9,116,8,9,11,9,12,9,
		117,1,10,5,10,121,8,10,10,10,12,10,124,9,10,1,10,1,10,1,10,1,10,4,29,40,
		69,92,0,11,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,3,0,1,
		2,5,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,50,51,4,0,58,58,65,90,95,
		95,97,122,1,0,48,57,138,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,1,9,1,0,0,
		0,1,11,1,0,0,0,1,13,1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,0,0,1,21,
		1,0,0,0,2,23,1,0,0,0,3,25,1,0,0,0,5,36,1,0,0,0,7,48,1,0,0,0,9,54,1,0,0,
		0,11,59,1,0,0,0,13,65,1,0,0,0,15,76,1,0,0,0,17,101,1,0,0,0,19,110,1,0,
		0,0,21,115,1,0,0,0,23,122,1,0,0,0,25,29,5,91,0,0,26,28,9,0,0,0,27,26,1,
		0,0,0,28,31,1,0,0,0,29,30,1,0,0,0,29,27,1,0,0,0,30,32,1,0,0,0,31,29,1,
		0,0,0,32,33,5,93,0,0,33,34,1,0,0,0,34,35,6,0,0,0,35,4,1,0,0,0,36,40,5,
		59,0,0,37,39,9,0,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,41,1,0,0,0,40,38,1,
		0,0,0,41,43,1,0,0,0,42,40,1,0,0,0,43,44,5,10,0,0,44,45,1,0,0,0,45,46,6,
		1,1,0,46,6,1,0,0,0,47,49,7,0,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,
		0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,6,2,1,0,53,8,1,0,0,0,54,55,5,61,
		0,0,55,56,1,0,0,0,56,57,6,3,2,0,57,10,1,0,0,0,58,60,7,1,0,0,59,58,1,0,
		0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,6,4,
		1,0,64,12,1,0,0,0,65,69,5,34,0,0,66,68,9,0,0,0,67,66,1,0,0,0,68,71,1,0,
		0,0,69,70,1,0,0,0,69,67,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,72,73,5,10,
		0,0,73,74,1,0,0,0,74,75,6,5,1,0,75,14,1,0,0,0,76,86,5,91,0,0,77,78,5,69,
		0,0,78,79,5,78,0,0,79,87,5,68,0,0,80,81,5,69,0,0,81,82,5,110,0,0,82,87,
		5,100,0,0,83,84,5,101,0,0,84,85,5,110,0,0,85,87,5,100,0,0,86,77,1,0,0,
		0,86,80,1,0,0,0,86,83,1,0,0,0,87,95,1,0,0,0,88,92,5,45,0,0,89,91,9,0,0,
		0,90,89,1,0,0,0,91,94,1,0,0,0,92,93,1,0,0,0,92,90,1,0,0,0,93,96,1,0,0,
		0,94,92,1,0,0,0,95,88,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,98,5,93,0,
		0,98,99,1,0,0,0,99,100,6,6,3,0,100,16,1,0,0,0,101,102,5,76,0,0,102,103,
		5,97,0,0,103,104,5,98,0,0,104,105,5,101,0,0,105,106,5,108,0,0,106,107,
		1,0,0,0,107,108,7,2,0,0,108,18,1,0,0,0,109,111,7,3,0,0,110,109,1,0,0,0,
		111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,20,1,0,0,0,114,116,
		7,4,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,
		0,118,22,1,0,0,0,119,121,8,1,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,
		1,0,0,0,122,123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,10,0,
		0,126,127,1,0,0,0,127,128,6,10,3,0,128,24,1,0,0,0,14,0,1,2,29,40,50,61,
		69,86,92,95,112,117,122,4,5,1,0,6,0,0,5,2,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
