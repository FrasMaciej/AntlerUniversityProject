//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d://Studia-2st//Antler//AntlerUniversityProject//Maps//Maps//GetUMPLex.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GetUMPLex : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POLYGON_SECTstart=1, POLYLINE_SECTstart=2, POI_SECTstart=3, SECTstart=4, 
		COMMENT=5, WS=6, EQ=7, NL=8, IntComment=9, SECTend=10, LabI=11, ID=12, 
		NUM=13, V=14;
	public const int
		SECTION=1, VALUE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "SECTION", "VALUE"
	};

	public static readonly string[] ruleNames = {
		"POLYGON_SECTstart", "POLYLINE_SECTstart", "POI_SECTstart", "SECTstart", 
		"COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", "LabI", "ID", "NUM", 
		"V"
	};


	public GetUMPLex(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GetUMPLex(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'[POLYGON]'", "'[POLYLINE]'", "'[POI]'", null, null, null, "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POLYGON_SECTstart", "POLYLINE_SECTstart", "POI_SECTstart", "SECTstart", 
		"COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", "LabI", "ID", "NUM", 
		"V"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GetUMPLex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GetUMPLex() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,183,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,
		1,3,5,3,67,8,3,10,3,12,3,70,9,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,78,8,4,10,
		4,12,4,81,9,4,1,4,1,4,1,4,1,4,1,5,4,5,88,8,5,11,5,12,5,89,1,5,1,5,1,6,
		1,6,1,6,1,6,1,7,4,7,99,8,7,11,7,12,7,100,1,7,4,7,104,8,7,11,7,12,7,105,
		1,7,4,7,109,8,7,11,7,12,7,110,3,7,113,8,7,1,7,1,7,1,8,1,8,5,8,119,8,8,
		10,8,12,8,122,9,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,138,8,9,1,9,1,9,5,9,142,8,9,10,9,12,9,145,9,9,3,9,147,8,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,4,11,162,8,11,
		11,11,12,11,163,1,12,4,12,167,8,12,11,12,12,12,168,1,13,5,13,172,8,13,
		10,13,12,13,175,9,13,1,13,1,13,1,13,3,13,180,8,13,1,13,1,13,4,68,79,120,
		143,0,14,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,
		13,29,14,3,0,1,2,7,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,13,13,1,0,
		10,10,1,0,50,51,4,0,58,58,65,90,95,95,97,122,1,0,48,57,197,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,1,0,
		0,0,1,17,1,0,0,0,1,19,1,0,0,0,1,21,1,0,0,0,1,23,1,0,0,0,1,25,1,0,0,0,1,
		27,1,0,0,0,2,29,1,0,0,0,3,31,1,0,0,0,5,43,1,0,0,0,7,56,1,0,0,0,9,64,1,
		0,0,0,11,75,1,0,0,0,13,87,1,0,0,0,15,93,1,0,0,0,17,112,1,0,0,0,19,116,
		1,0,0,0,21,127,1,0,0,0,23,152,1,0,0,0,25,161,1,0,0,0,27,166,1,0,0,0,29,
		173,1,0,0,0,31,32,5,91,0,0,32,33,5,80,0,0,33,34,5,79,0,0,34,35,5,76,0,
		0,35,36,5,89,0,0,36,37,5,71,0,0,37,38,5,79,0,0,38,39,5,78,0,0,39,40,5,
		93,0,0,40,41,1,0,0,0,41,42,6,0,0,0,42,4,1,0,0,0,43,44,5,91,0,0,44,45,5,
		80,0,0,45,46,5,79,0,0,46,47,5,76,0,0,47,48,5,89,0,0,48,49,5,76,0,0,49,
		50,5,73,0,0,50,51,5,78,0,0,51,52,5,69,0,0,52,53,5,93,0,0,53,54,1,0,0,0,
		54,55,6,1,0,0,55,6,1,0,0,0,56,57,5,91,0,0,57,58,5,80,0,0,58,59,5,79,0,
		0,59,60,5,73,0,0,60,61,5,93,0,0,61,62,1,0,0,0,62,63,6,2,0,0,63,8,1,0,0,
		0,64,68,5,91,0,0,65,67,9,0,0,0,66,65,1,0,0,0,67,70,1,0,0,0,68,69,1,0,0,
		0,68,66,1,0,0,0,69,71,1,0,0,0,70,68,1,0,0,0,71,72,5,93,0,0,72,73,1,0,0,
		0,73,74,6,3,0,0,74,10,1,0,0,0,75,79,5,59,0,0,76,78,9,0,0,0,77,76,1,0,0,
		0,78,81,1,0,0,0,79,80,1,0,0,0,79,77,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,
		0,82,83,5,10,0,0,83,84,1,0,0,0,84,85,6,4,1,0,85,12,1,0,0,0,86,88,7,0,0,
		0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,
		0,91,92,6,5,1,0,92,14,1,0,0,0,93,94,5,61,0,0,94,95,1,0,0,0,95,96,6,6,2,
		0,96,16,1,0,0,0,97,99,7,1,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,
		0,0,100,101,1,0,0,0,101,113,1,0,0,0,102,104,7,2,0,0,103,102,1,0,0,0,104,
		105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,113,1,0,0,0,107,109,7,
		3,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,
		111,113,1,0,0,0,112,98,1,0,0,0,112,103,1,0,0,0,112,108,1,0,0,0,113,114,
		1,0,0,0,114,115,6,7,1,0,115,18,1,0,0,0,116,120,5,34,0,0,117,119,9,0,0,
		0,118,117,1,0,0,0,119,122,1,0,0,0,120,121,1,0,0,0,120,118,1,0,0,0,121,
		123,1,0,0,0,122,120,1,0,0,0,123,124,5,10,0,0,124,125,1,0,0,0,125,126,6,
		8,1,0,126,20,1,0,0,0,127,137,5,91,0,0,128,129,5,69,0,0,129,130,5,78,0,
		0,130,138,5,68,0,0,131,132,5,69,0,0,132,133,5,110,0,0,133,138,5,100,0,
		0,134,135,5,101,0,0,135,136,5,110,0,0,136,138,5,100,0,0,137,128,1,0,0,
		0,137,131,1,0,0,0,137,134,1,0,0,0,138,146,1,0,0,0,139,143,5,45,0,0,140,
		142,9,0,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,144,1,0,0,0,143,141,1,
		0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,146,139,1,0,0,0,146,147,1,0,0,0,
		147,148,1,0,0,0,148,149,5,93,0,0,149,150,1,0,0,0,150,151,6,9,3,0,151,22,
		1,0,0,0,152,153,5,76,0,0,153,154,5,97,0,0,154,155,5,98,0,0,155,156,5,101,
		0,0,156,157,5,108,0,0,157,158,1,0,0,0,158,159,7,4,0,0,159,24,1,0,0,0,160,
		162,7,5,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,
		0,0,0,164,26,1,0,0,0,165,167,7,6,0,0,166,165,1,0,0,0,167,168,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,28,1,0,0,0,170,172,8,1,0,0,171,170,1,0,
		0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,179,1,0,0,0,175,
		173,1,0,0,0,176,177,5,13,0,0,177,180,5,10,0,0,178,180,7,1,0,0,179,176,
		1,0,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,182,6,13,3,0,182,30,1,0,0,
		0,18,0,1,2,68,79,89,100,105,110,112,120,137,143,146,163,168,173,179,4,
		5,1,0,6,0,0,5,2,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
