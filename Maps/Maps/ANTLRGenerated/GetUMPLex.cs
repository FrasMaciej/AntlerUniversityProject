//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from x:/source/Antlr/FrasMaciej/AntlerUniversityProject/Maps/Maps/GetUMPLex.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GetUMPLex : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		POLYGON_SECTstart=1, POLYLINE_SECTstart=2, POI_SECTstart=3, SECTstart=4, 
		COMMENT=5, WS=6, EQ=7, NL=8, IntComment=9, SECTend=10, LabI=11, ID=12, 
		NUM=13, FLOAT=14, POINT=15, POINTS=16, COMMA=17, V=18, V_END=19;
	public const int
		SECTION=1, VALUE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "SECTION", "VALUE"
	};

	public static readonly string[] ruleNames = {
		"POLYGON_SECTstart", "POLYLINE_SECTstart", "POI_SECTstart", "SECTstart", 
		"COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", "LabI", "ID", "NUM", 
		"FLOAT", "POINT", "POINTS", "COMMA", "V", "V_END"
	};


	public GetUMPLex(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GetUMPLex(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'[POLYGON]'", "'[POLYLINE]'", "'[POI]'", null, null, null, "'='", 
		null, null, null, null, null, null, null, null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "POLYGON_SECTstart", "POLYLINE_SECTstart", "POI_SECTstart", "SECTstart", 
		"COMMENT", "WS", "EQ", "NL", "IntComment", "SECTend", "LabI", "ID", "NUM", 
		"FLOAT", "POINT", "POINTS", "COMMA", "V", "V_END"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GetUMPLex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GetUMPLex() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,222,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,77,8,3,10,3,
		12,3,80,9,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,88,8,4,10,4,12,4,91,9,4,1,4,1,
		4,1,4,1,4,1,5,4,5,98,8,5,11,5,12,5,99,1,5,1,5,1,6,1,6,1,6,1,6,1,7,4,7,
		109,8,7,11,7,12,7,110,1,7,4,7,114,8,7,11,7,12,7,115,1,7,4,7,119,8,7,11,
		7,12,7,120,3,7,123,8,7,1,7,1,7,1,8,1,8,5,8,129,8,8,10,8,12,8,132,9,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,148,8,9,1,9,
		1,9,5,9,152,8,9,10,9,12,9,155,9,9,3,9,157,8,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,11,4,11,172,8,11,11,11,12,11,173,1,12,
		4,12,177,8,12,11,12,12,12,178,1,13,4,13,182,8,13,11,13,12,13,183,1,13,
		1,13,4,13,188,8,13,11,13,12,13,189,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,5,15,202,8,15,10,15,12,15,205,9,15,1,16,1,16,1,16,1,16,
		1,17,4,17,212,8,17,11,17,12,17,213,1,18,1,18,1,18,3,18,219,8,18,1,18,1,
		18,4,78,89,130,153,0,19,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,
		23,11,25,12,27,13,29,14,31,15,33,16,35,17,37,18,39,19,3,0,1,2,7,3,0,9,
		10,13,13,32,32,2,0,10,10,13,13,1,0,13,13,1,0,10,10,1,0,50,51,4,0,58,58,
		65,90,95,95,97,122,1,0,48,57,239,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,
		0,0,1,21,1,0,0,0,1,23,1,0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,2,29,1,0,0,0,2,
		31,1,0,0,0,2,33,1,0,0,0,2,35,1,0,0,0,2,37,1,0,0,0,2,39,1,0,0,0,3,41,1,
		0,0,0,5,53,1,0,0,0,7,66,1,0,0,0,9,74,1,0,0,0,11,85,1,0,0,0,13,97,1,0,0,
		0,15,103,1,0,0,0,17,122,1,0,0,0,19,126,1,0,0,0,21,137,1,0,0,0,23,162,1,
		0,0,0,25,171,1,0,0,0,27,176,1,0,0,0,29,181,1,0,0,0,31,191,1,0,0,0,33,197,
		1,0,0,0,35,206,1,0,0,0,37,211,1,0,0,0,39,218,1,0,0,0,41,42,5,91,0,0,42,
		43,5,80,0,0,43,44,5,79,0,0,44,45,5,76,0,0,45,46,5,89,0,0,46,47,5,71,0,
		0,47,48,5,79,0,0,48,49,5,78,0,0,49,50,5,93,0,0,50,51,1,0,0,0,51,52,6,0,
		0,0,52,4,1,0,0,0,53,54,5,91,0,0,54,55,5,80,0,0,55,56,5,79,0,0,56,57,5,
		76,0,0,57,58,5,89,0,0,58,59,5,76,0,0,59,60,5,73,0,0,60,61,5,78,0,0,61,
		62,5,69,0,0,62,63,5,93,0,0,63,64,1,0,0,0,64,65,6,1,0,0,65,6,1,0,0,0,66,
		67,5,91,0,0,67,68,5,80,0,0,68,69,5,79,0,0,69,70,5,73,0,0,70,71,5,93,0,
		0,71,72,1,0,0,0,72,73,6,2,0,0,73,8,1,0,0,0,74,78,5,91,0,0,75,77,9,0,0,
		0,76,75,1,0,0,0,77,80,1,0,0,0,78,79,1,0,0,0,78,76,1,0,0,0,79,81,1,0,0,
		0,80,78,1,0,0,0,81,82,5,93,0,0,82,83,1,0,0,0,83,84,6,3,0,0,84,10,1,0,0,
		0,85,89,5,59,0,0,86,88,9,0,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,90,1,0,0,
		0,89,87,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,10,0,0,93,94,1,0,0,
		0,94,95,6,4,1,0,95,12,1,0,0,0,96,98,7,0,0,0,97,96,1,0,0,0,98,99,1,0,0,
		0,99,97,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,6,5,1,0,102,14,
		1,0,0,0,103,104,5,61,0,0,104,105,1,0,0,0,105,106,6,6,2,0,106,16,1,0,0,
		0,107,109,7,1,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,
		111,1,0,0,0,111,123,1,0,0,0,112,114,7,2,0,0,113,112,1,0,0,0,114,115,1,
		0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,123,1,0,0,0,117,119,7,3,0,0,
		118,117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,
		1,0,0,0,122,108,1,0,0,0,122,113,1,0,0,0,122,118,1,0,0,0,123,124,1,0,0,
		0,124,125,6,7,1,0,125,18,1,0,0,0,126,130,5,34,0,0,127,129,9,0,0,0,128,
		127,1,0,0,0,129,132,1,0,0,0,130,131,1,0,0,0,130,128,1,0,0,0,131,133,1,
		0,0,0,132,130,1,0,0,0,133,134,5,10,0,0,134,135,1,0,0,0,135,136,6,8,1,0,
		136,20,1,0,0,0,137,147,5,91,0,0,138,139,5,69,0,0,139,140,5,78,0,0,140,
		148,5,68,0,0,141,142,5,69,0,0,142,143,5,110,0,0,143,148,5,100,0,0,144,
		145,5,101,0,0,145,146,5,110,0,0,146,148,5,100,0,0,147,138,1,0,0,0,147,
		141,1,0,0,0,147,144,1,0,0,0,148,156,1,0,0,0,149,153,5,45,0,0,150,152,9,
		0,0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,154,1,0,0,0,153,151,1,0,0,0,
		154,157,1,0,0,0,155,153,1,0,0,0,156,149,1,0,0,0,156,157,1,0,0,0,157,158,
		1,0,0,0,158,159,5,93,0,0,159,160,1,0,0,0,160,161,6,9,3,0,161,22,1,0,0,
		0,162,163,5,76,0,0,163,164,5,97,0,0,164,165,5,98,0,0,165,166,5,101,0,0,
		166,167,5,108,0,0,167,168,1,0,0,0,168,169,7,4,0,0,169,24,1,0,0,0,170,172,
		7,5,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,
		0,174,26,1,0,0,0,175,177,7,6,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,
		1,0,0,0,178,179,1,0,0,0,179,28,1,0,0,0,180,182,7,6,0,0,181,180,1,0,0,0,
		182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,187,
		5,46,0,0,186,188,7,6,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,
		0,189,190,1,0,0,0,190,30,1,0,0,0,191,192,5,40,0,0,192,193,3,29,13,0,193,
		194,5,44,0,0,194,195,3,29,13,0,195,196,5,41,0,0,196,32,1,0,0,0,197,203,
		3,31,14,0,198,199,3,35,16,0,199,200,3,31,14,0,200,202,1,0,0,0,201,198,
		1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,34,1,0,0,0,
		205,203,1,0,0,0,206,207,5,44,0,0,207,208,1,0,0,0,208,209,6,16,1,0,209,
		36,1,0,0,0,210,212,8,1,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,
		0,0,213,214,1,0,0,0,214,38,1,0,0,0,215,216,5,13,0,0,216,219,5,10,0,0,217,
		219,7,1,0,0,218,215,1,0,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,221,6,
		18,3,0,221,40,1,0,0,0,21,0,1,2,78,89,99,110,115,120,122,130,147,153,156,
		173,178,183,189,203,213,218,4,5,1,0,6,0,0,5,2,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
